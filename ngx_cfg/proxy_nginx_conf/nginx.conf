user	nobody nobody;
worker_processes	auto;
worker_cpu_affinity	auto;
worker_rlimit_nofile	65535;

error_log	/usr/local/tengine/logs/error.log;
#error_log	logs/error.log notice;
#error_log	logs/error.log info;

pid	/var/run/nginx.pid;

events {
	use epoll;
	worker_connections 65535;
}

http {
	server_names_hash_bucket_size 1024;
	include mime.types;
	include	blocksip.conf;
	default_type application/octet-stream;
	
	log_format main-old
		'$remote_addr\t'		#1
		'$http_x_forwarded_for\t'	#2
		'$remote_user\t'		#3
		'$time_local\t'			#4
		'$request\t'			#5
		'$status\t'			#6
		'$http_referer\t'		#7
		'$http_user_agent\t'		#8
		'$request_length\t'		#9
		'$body_bytes_sent\t'		#10
		'$bytes_sent\t'			#11
		'$upstream_addr\t'		#12
		'$upstream_response_time\t'	#13
		'$request_time\t'		#14
		'$cookie_phpsessid\t'		#15
		'$cookie___URM_UID__\t'		#16
		'$http_cookie'			#17
		;

	# tested under nginx-1.8.0,commit to use in 2016-07-11 11:25
	log_format main
		'$remote_addr\t'		#1
		'$http_x_forwarded_for\t'	#2
		'$remote_user\t'		#3
		'$time_local\t'			#4 测试过,是结束请求的时刻,不是收到请求的时刻
		'$request_method\t'		#5 request method usually GET or POST
		#'$request_uri\t'		#6 full original request URI (with arguments)
		'$uri\t'			#6 current URI in request
		'$args\t'			#7 arguments in the request line
		'$server_protocol\t'		#8 request protocol usually HTTP/1.0 or HTTP/1.1
		'$status\t'			#9
		'$http_referer\t'		#10
		'$http_user_agent\t'		#11
		'$request_length\t'		#12 request length (including request line, header, and request body)
		'$bytes_sent\t'			#13 number of bytes sent to a client
		'$upstream_addr\t'		#14
		'$upstream_response_time\t'	#15
		'$request_time\t'		#16 time elapsed since the first bytes were read from the client
		'$cookie_phpsessid\t'		#17
		'$cookie___URM_UID__\t'		#18
		'$http_cookie'			#19
		;

	log_format main-json
		'"source_ip":"$remote_addr",'
		'"phpsessid":"$cookie_phpsessid",'
		'"urm_id":"$cookie___URM_UID__",'
		'"remote_user":"$remote_user",'
		'"timestamp":"$time_local",'
		'"request":"$request",'
		'"status":$status,'
		'"body_bytes_sent":$body_bytes_sent,'
		'"http_referer":"$http_referer",'
		'"http_user_agent":"$http_user_agent",'
		'"request_length":$request_length,'
		'"bytes_sent":$bytes_sent,'
		'"upstream_addr":"$upstream_addr",'
		'"upstream_response_time":[$upstream_response_time],'
		'"request_time":$request_time,';

	access_log /usr/local/tengine/logs/access.log main;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 30s;

	gzip on;
	gzip_min_length 256;
	gzip_comp_level 3;
	gzip_http_version 1.1;
	gzip_buffers 4 16k;
	gzip_types
		text/plain
		text/javascript
		text/css
		text/xml
		text/x-component
		application/javascript
		application/x-javascript
		application/xml
		application/json
		application/xhtml+xml
		application/rss+xml
		application/atom+xml
		application/x-font-ttf
		application/vnd.ms-fontobject
		image/svg+xml
		image/x-icon
		font/opentype;
	gzip_disable "MSIE [1-6]\.";
	gzip_vary on;

	client_max_body_size 100m;
	client_body_buffer_size 64k;
	client_header_buffer_size 64k;
	client_body_timeout 300s;
	client_header_timeout 300s;
	large_client_header_buffers 64 64k;
	client_body_temp_path /tmp;

	proxy_connect_timeout 5s;
	proxy_read_timeout 600s;
	proxy_send_timeout 600s;
	proxy_buffer_size 128k;
	proxy_buffers 64 64k;
	proxy_busy_buffers_size 128k;
	proxy_temp_file_write_size 128k;
	proxy_temp_path /home/proxy/tmp/;
	proxy_http_version 1.1;
	proxy_set_header Connection "";
	proxy_upstream_tries 3;

	#perl_set $unix_timestamp 'sub { time(); }';	# 不需要了,用 tengine 的 $unix_time

	map $upstream_http_content_length $flag_cache_empty {
		default 0;
		0 1;
	}

	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# 黑名单
	geo $banned {
		default 0;
		include black_list.txt;
	}

	# 白名单
	geo $if_remote_addr_matter {
		default 1;
		include white_list.txt;
	}

	map $if_remote_addr_matter $key_binary_remote_addr {
		1 $binary_remote_addr;
		0 "";
	}

	geo $if_proxy_addr_matter {
		# 根据 $remote_addr 的值决定 $if_proxy_addr_matter 的值,所以下面列出的IP必须是与之直接建立tcp连接的
		# 测试过不适合使用 $proxy_add_x_forwarded_for
		# 白名单测试有效,$if_proxy_addr_matter=0 => $key_xforwarded="" => Requests with an empty key value are not accounted.
		default 1;
		include white_list.txt;
	}

	map $if_proxy_addr_matter $key_xforwarded {
		1 $proxy_add_x_forwarded_for;		# X-Forwarded-For,$remote_addr OR $remote_addr
		0 "";
	}

	limit_conn_zone $key_binary_remote_addr zone=cz_per_remoteip:10m;
	limit_conn_zone $key_xforwarded zone=cz_per_xforwarded:10m;
	limit_conn_zone $server_name zone=cz_per_servername:10m;

	limit_req_zone $uri zone=rz_per_uri:10m rate=10000r/m;		# without arguments
	limit_req_zone $request_uri zone=rz_per_url:10m rate=5000r/m;	# with arguments

	limit_req_zone $key_binary_remote_addr zone=rz_per_remoteip:10m rate=300r/m;
	limit_req_zone $key_binary_remote_addr $uri zone=rz_per_remoteip_uri:10m rate=30r/m;
	limit_req_zone $key_binary_remote_addr $request_uri zone=rz_per_remoteip_url:10m rate=15r/m;

	limit_req_zone $key_xforwarded zone=rz_per_xforwarded:10m rate=300r/m;
	limit_req_zone $key_xforwarded $uri zone=rz_per_xforwarded_uri:10m rate=30r/m;
	limit_req_zone $key_xforwarded $request_uri zone=rz_per_xforwarded_url:10m rate=15r/m;

	limit_req_zone $cookie_phpsessid zone=rz_per_phpsessid:10m rate=300r/m;
	limit_req_zone $cookie_phpsessid $uri zone=rz_per_phpsessid_uri:10m rate=30r/m;
	limit_req_zone $cookie_phpsessid $request_uri zone=rz_per_phpsessid_url:10m rate=15r/m;

	limit_req_zone $cookie___URM_UID__ zone=rz_per_urmid:10m rate=300r/m;
	limit_req_zone $cookie___URM_UID__ $uri zone=rz_per_urmid_uri:10m rate=30r/m;
	limit_req_zone $cookie___URM_UID__ $request_uri zone=rz_per_urmid_url:10m rate=15r/m;

	#limit_req_zone $http_user_agent $uri zone=:10m rate=1r/s;
	#limit_req_zone $http_x_forwarded_for zone=:10m rate=6r/m;
	#limit_req_zone $http_x_real_forwarded_for zone=:10m rate=6r/m;
	#limit_req_zone $request_uri zone=:10m rate=1r/s;


	upstream php_server_pool {
		# 绝大部分站点调度到这里
		#ip_hash;
		keepalive 5;
		keepalive_timeout 65s;
		server 10.0.0.14:60083 weight=6 max_fails=0 fail_timeout=300s;
		server 10.0.0.13:60083 weight=2 max_fails=0 fail_timeout=300s;
		server 10.0.0.12:60083 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.11:60083 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.10:60083 weight=1 max_fails=0 fail_timeout=300s;
		# 健康检查 5秒检测一次,持续30秒不正常判定为不可用;持续120秒正常判定为可用
		check interval=5000 rise=24 fall=6 timeout=3000 default_down=false type=http;
		check_http_send "GET /status HTTP/1.0\r\n\r\n";
		check_http_expect_alive http_2xx;
	}

	upstream php56_server_pool {
		# icc iwebsite2 swoolechat 等站点调度到这里
		#ip_hash;
		server 10.0.0.14:60082 weight=6 max_fails=0 fail_timeout=300s;
		server 10.0.0.13:60082 weight=2 max_fails=0 fail_timeout=300s;
		server 10.0.0.12:60082 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.11:60082 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.10:60082 weight=1 max_fails=0 fail_timeout=300s;
		# 健康检查 5秒检测一次,持续30秒不正常判定为不可用;持续120秒正常判定为可用
		check interval=5000 rise=24 fall=6 timeout=3000 default_down=false type=http;
		check_http_send "GET /status HTTP/1.0\r\n\r\n";
		check_http_expect_alive http_2xx;
	}

	upstream php7_server_pool {
		# icc-php7 等站点调度到这里
		server 10.0.0.14:60081 weight=6 max_fails=0 fail_timeout=300s;
		server 10.0.0.13:60081 weight=2 max_fails=0 fail_timeout=300s;
		server 10.0.0.12:60081 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.11:60081 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.10:60081 weight=1 max_fails=0 fail_timeout=300s;
		# 健康检查 5秒检测一次,持续30秒不正常判定为不可用;持续120秒正常判定为可用
		check interval=5000 rise=24 fall=6 timeout=3000 default_down=false type=http;
		check_http_send "GET /status HTTP/1.0\r\n\r\n";
		check_http_expect_alive http_2xx;
	}

	upstream php_server_pool_laiyifen_only {
		# 来伊份站点调度到这里
		server 10.0.0.14:60083 weight=6 max_fails=0 fail_timeout=300s;
		server 10.0.0.13:60083 weight=2 max_fails=0 fail_timeout=300s;
		server 10.0.0.12:60083 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.11:60083 weight=1 max_fails=0 fail_timeout=300s;
		server 10.0.0.10:60083 weight=1 max_fails=0 fail_timeout=300s;
		# 健康检查 5秒检测一次,持续30秒不正常判定为不可用;持续120秒正常判定为可用
		check interval=5000 rise=24 fall=6 timeout=3000 default_down=false type=http;
		check_http_send "GET /status HTTP/1.0\r\n\r\n";
		check_http_expect_alive http_2xx;
	}

	upstream py_weixin_service_pool {
		# 仅用于测试,不能承载高并发
		#server 10.0.0.10:60000 weight=3 max_fails=0 fail_timeout=300s;
		server 10.0.0.11:60000 weight=3 max_fails=0 fail_timeout=300s;
		server 10.0.0.12:60000 weight=3 max_fails=0 fail_timeout=300s;
		server 10.0.0.13:60000 weight=3 max_fails=0 fail_timeout=300s;
		server 10.0.0.14:60000 weight=3 max_fails=0 fail_timeout=300s;
	}

	upstream py_trouter_service_pool {
		# max:300 to backend.
		server 10.0.0.1:8000 weight=3 max_fails=0 fail_timeout=300s;
		#server 10.0.0.2:8000 weight=3 max_fails=0 fail_timeout=300s;
		server 10.0.0.1:8001 weight=3 max_fails=0 fail_timeout=300s;
		#server 10.0.0.2:8001 weight=3 max_fails=0 fail_timeout=300s;
		server 10.0.0.1:8002 weight=3 max_fails=0 fail_timeout=300s;
		#server 10.0.0.2:8002 weight=3 max_fails=0 fail_timeout=300s;
	}

	upstream py_trouter_service_pool_emergency {
		# max:100 to backend.
		server 10.0.0.1:8003 weight=3 max_fails=0 fail_timeout=300s;
		#server 10.0.0.2:8003 weight=3 max_fails=0 fail_timeout=300s;
	}

	upstream py_trouter_service_pool_for_icc_docker {
		# max:100 to backend.
		server 10.0.0.1:8004 weight=3 max_fails=0 fail_timeout=300s;
		#server 10.0.0.2:8004 weight=3 max_fails=0 fail_timeout=300s;
	}

	upstream py_trouter_service_pool_for_async {
		# max:100 to backend.
		server 10.0.0.1:8005 weight=3 max_fails=0 fail_timeout=300s;
		#server 10.0.0.2:8005 weight=3 max_fails=0 fail_timeout=300s;
	}

	include cache-zone.conf;
	include /usr/local/tengine/conf/vhost/*.conf;
	include /usr/local/tengine/conf/demo/*.conf;
	include /usr/local/tengine/conf/alias/*.conf;
	include /usr/local/tengine/conf/free/*.conf;
}

